<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import Namespace="System.Xml" #>
<#@ import Namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var document = new XmlDocument();
	var file = Host.ResolvePath("../TestData/ConversionResults.xml");
	document.Load(file);
	var colors = document.SelectNodes("ConversionResults/*");
#>
<#@ output extension=".cs" #>//Note: This is a generated file.
using ColorMine.ColorSpaces;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace ColorMine.Test.ColorSpaces
{
	public abstract class ColorSpaceTest
    {
<#
	var fromSpace = colors[0];
	var fromName = fromSpace.Name;
	var test = fromSpace.ChildNodes[0];
	var colorName = test.Attributes["Name"].Value;

	foreach (XmlNode toSpace in test.ChildNodes) {
		var toName = toSpace.Name;
#>

		protected static void ExpectedValuesForKnownColor(IColorSpace knownColor, I<#= toName #> expectedColor)
		{
			var target = knownColor.To<<#= toName #>>();

<# foreach (XmlNode attribute in toSpace.Attributes) { if(attribute.Name != "Name") { #>
			Assert.IsTrue(CloseEnough(expectedColor.<#= attribute.Name #>,target.<#= attribute.Name #>),"(<#= attribute.Name #>)" + expectedColor.<#= attribute.Name #> + " != " + target.<#= attribute.Name #>);
<# } }#>
		}
<# } #>
		private static bool CloseEnough(double a, double b)
		{
			// Define the tolerance for variation in their values 
			var difference = Math.Abs(a * .01);

			// Compare the values 
			// The output to the console indicates that the two values are equal 
			return Math.Abs(a - b) <= difference;
		}

	}

}